// This is the top level grid container that contains the rest of the grid items
@mixin cads-make-container() {
    width: 100%;
    margin-right: auto;
    margin-left: auto;

    @each $breakpoint in map-keys($cads-breakpoints) {
        $gutter: map-get($cads-grid-breakpoint-gutters, $breakpoint);

        @include cads-media-breakpoint-up($breakpoint) {
            padding-right: $gutter;
            padding-left: $gutter;
        }
    }

    @each $breakpoint, $container-max-width in $cads-container-max-widths {
        @include cads-media-breakpoint-up($breakpoint, $cads-breakpoints) {
            max-width: $container-max-width;
        }
    }
}

@mixin cads-make-row() {
    display: flex;
    flex-wrap: wrap;

    @each $breakpoint in map-keys($cads-breakpoints) {
        $gutter: map-get($cads-grid-breakpoint-gutters, $breakpoint);

        @include cads-media-breakpoint-up($breakpoint) {
            margin-top: ($gutter / 2);
            margin-bottom: ($gutter / 2);
            margin-right: ($gutter / -2);
            margin-left: ($gutter / -2);
        }
    }
}

@mixin cads-make-col-ready() {
    position: relative;
    // Prevent columns from becoming too narrow when at smaller grid tiers by
    // always setting width to 100% (flex will override later this)
    width: 100%;
    min-height: 1px; // Stop it from collapsing

    @each $breakpoint in map-keys($cads-breakpoints) {
        $gutter: map-get($cads-grid-breakpoint-gutters, $breakpoint);

        @include cads-media-breakpoint-up($breakpoint) {
            padding-right: ($gutter / 2);
            padding-left: ($gutter / 2);
        }
    }
}

@mixin cads-make-col($size, $columns: $cads-grid-columns) {
    flex: 0 0 percentage($size / $columns);
    // Ensure content within each column does not blow out the width of the column
    max-width: percentage($size / $columns);
}

@mixin cads-make-col-offset($size, $columns) {
    $num: $size / $columns;
    margin-left: if($num == 0, 0, percentage($num));
}

// Generate the correct number of grid classes
@mixin cads-make-grid-columns() {
    // Common properties for all breakpoints
    %grid-column {
        position: relative;
        width: 100%;
        min-height: 1px; // Don't collapse when empty
    }

    @each $breakpoint in map-keys($cads-breakpoints) {
        $infix: cads-breakpoint-infix($breakpoint);
        $gutter: map-get($cads-grid-breakpoint-gutters, $breakpoint);

        %grid-gutters {
            @include cads-media-breakpoint-up($breakpoint) {
                padding-right: ($gutter / 2);
                padding-left: ($gutter / 2);
            }
        }

        // Allow columns to stretch full width below their breakpoints
        @for $i from 1 through $cads-grid-columns {
            .cads-grid-col#{$infix}-#{$i} {
                @extend %grid-column;
                @extend %grid-gutters;
            }
        }

        .cads-grid-col#{$infix},
        .cads-grid-col#{$infix}-auto {
            @extend %grid-column;
            @extend %grid-gutters;
        }

        @include cads-media-breakpoint-up($breakpoint) {
            // Provide basic `.col-{bp}` classes for equal-width flexbox columns
            .cads-grid-col#{$infix} {
                flex-basis: 0;
                flex-grow: 1;
                max-width: 100%;
            }

            .cads-grid-col#{$infix}-auto {
                flex: 0 0 auto;
                width: auto;
                max-width: none; // Reset earlier grid tiers
            }

            @for $i from 1 through $cads-grid-columns {
                .cads-grid-col#{$infix}-#{$i} {
                    @include cads-make-col($i, $cads-grid-columns);
                }
            }
        }
    }
}
