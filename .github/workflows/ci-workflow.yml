##
# This workflow runs two main groups of jobs:
#
# 1. A set of parallel jobs to run node and ruby based tests,
#    alongside a job to build the storybook docs and static assets.
#
# 2. A subsequent set of parallel jobs for pa11y, backstop, and selenium.
#    These depend on the build job and are seeded with a copy of the docs.
##
name: Continuous Integration
on:
  push:
  schedule:
    - cron: '0 2 * * *'

env:
  # Share node version across jobs
  # actions/setup-node doesn't currently look at any config files
  # for now we do the simplest thing and set an environment variable.
  # See https://github.com/actions/setup-node/pull/239
  # Maybe we could use https://github.com/guardian/actions-setup-node directly in the meantime?
  NODE_VERSION: '14'
  RUBY_VERSION: '2.7.3'

jobs:
  node-test:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}
      - uses: bahmutov/npm-install@v1
      - run: npm run lint
      - run: npm test

  ruby-lint:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true
      - run: bundle exec rubocop --format github
      - run: bundle exec haml-lint

  # Actions can run in parallel at the job or the workflow level.
  # In order to run our build-dependent tests in parallel we need a way
  # to build the docs and then "seed" each stage with a copy.
  # We can do this using using artifacts along with a `needs` clause on each job
  # See: https://docs.github.com/en/actions/learn-github-actions/essential-features-of-github-actions#sharing-data-between-jobs
  #      https://docs.github.com/en/actions/learn-github-actions/managing-complex-workflows#creating-dependent-jobs
  build:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}
      - uses: bahmutov/npm-install@v1
      - uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true
      - run: npm run build
      - run: npm run docs:build
      - uses: actions/upload-artifact@v2
        with:
          name: docs-build
          path: |
            docs
            lib
          retention-days: 1

  pa11y:
    needs: build
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}
      - uses: bahmutov/npm-install@v1
      - uses: actions/download-artifact@v2
        with:
          name: docs-build
      # Explicitly install testing dependencies
      - uses: bahmutov/npm-install@v1
        with:
          working-directory: testing
      - run: ruby -run -e httpd -- docs -p 6006 &
      - run: ./bin/wait-for localhost:6006
      - run: npx pa11y-ci --config=pa11yci.js
        working-directory: ./testing/wcag

  backstop:
    needs: build
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: docs-build
      # Explicitly install testing dependencies
      - uses: bahmutov/npm-install@v1
        with:
          working-directory: testing
        env:
          # Skip the pa11y chromium download,
          # we only want the backstop docker command
          PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: true
      - run: ruby -run -e httpd -- docs -p 6006 &
      - run: ./bin/wait-for localhost:6006
      - run: npx backstop test --docker --config=backstop-config-actions.js
        working-directory: ./testing/visual-regression
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: backstop-report
          path: |
            testing/visual-regression/backstop_data/html_report
            testing/visual-regression/backstop_data/bitmaps_reference
            testing/visual-regression/backstop_data/bitmaps_test
          retention-days: 3

  # The Ubuntu 20.04 virtual environment includes a copy of Chrome by default
  # We can use this to run our selenium tests locally without needing selenium grid
  # See: https://github.com/actions/virtual-environments/blob/main/images/linux/Ubuntu2004-README.md#browsers-and-drivers
  selenium-tests:
    needs: build
    runs-on: ubuntu-20.04
    env:
      HEADLESS: true
      BROWSER: chrome
      LOG_LOCATION: automation_logs.log
      TESTING_BASE_URL: 'http://localhost:6006'
    steps:
      - uses: actions/checkout@v2
      - uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true
      - uses: actions/download-artifact@v2
        with:
          name: docs-build
      - run: ruby -run -e httpd -- docs -p 6006 &
      - run: ./bin/wait-for localhost:6006 -- bundle exec rake design_system:all
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: grid-artifacts
          path: testing/artifacts
          retention-days: 3

  engine:
    runs-on: ubuntu-20.04
    defaults:
      run:
        working-directory: engine
    strategy:
      fail-fast: false
      matrix:
        rails_version: ['6.1', 'main']
        ruby_version: ['2.7', '3.0']
    steps:
      - uses: actions/checkout@v2
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.ruby_version }}
          working-directory: engine
      - run: |
          bundle config path vendor/bundle
          bundle update
          bundle install --jobs 4 --retry 3
          bundle exec rake spec
        env:
          RAILS_VERSION: ${{ matrix.rails_version }}

  demo-app:
    needs: engine
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}

      # We link the @citizensadvice/design-system package
      # from the root but we only build the lib/ directory
      # when we publish to npm, so we need to build it first.
      - uses: bahmutov/npm-install@v1
      - run: npm run build

      # Setup demo app
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          working-directory: demo
      - run: |
          bundle config path vendor/bundle
          bundle update
          bundle install --jobs 4 --retry 3
        working-directory: demo
      - uses: bahmutov/npm-install@v1
        with:
          working-directory: demo

      # Run a webpack build as a smoke test
      - run: ./bin/webpack
        working-directory: demo
