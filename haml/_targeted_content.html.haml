:ruby
  # Default type to standard if none is provided
  type = targeted_content.fetch("type", "public")
  id = targeted_content["id"]
  title = targeted_content["title"].squish
  body = targeted_content["body"]
  # Allow control over heading level, default to h2
  heading_level = targeted_content.fetch("heading_level", 2).to_i
  heading_tag = "h#{heading_level.clamp(1, 6)}"
  # Allow disabling toggleable behaviour (mostly for tests)
  is_toggleable = targeted_content.fetch("is_toggleable", true)
  close_button = targeted_content.fetch("close_button", true)

  attributes = {
    class: [
      ("cads-targeted-content--adviser" if type == "adviser"),
      ("cads-no-close" unless close_button),
      ("js-cads-targeted-content" if is_toggleable)
    ],
    data: {
      descriptive_label_show: "#{t('cads.targeted_content.descriptive_label_show')}, #{title}",
      descriptive_label_hide: "#{t('cads.targeted_content.descriptive_label_hide')}, #{title}",
      close_label: t("cads.targeted_content.close_label")
    }
  }

  heading_attributes = {
    class: %w[cads-targeted-content__title js-cads-targeted-content__title],
    id: "h-#{id}",
    data: { testid: "targeted-content-title" }
  }

.cads-targeted-content{ attributes }
  - haml_tag(heading_tag, heading_attributes) do
    .cads-targeted-content__title-text
      - if type != "public"
        .cads-targeted-content__badge
          %span.cads-badge.cads-badge--adviser= t("cads.targeted_content.#{type}")
      = title
  .cads-targeted-content__content.cads-prose.js-cads-targeted-content__content{ id: "#{id}-content" }
    = body
